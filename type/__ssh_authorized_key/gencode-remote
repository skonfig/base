#!/bin/sh -e
#
# 2014 Steven Armstrong (steven-cdist at armstrong.cc)
# 2023 Dennis Camera (dennis.camera at riiengineering.ch)
#
# This file is part of skonfig-base.
#
# skonfig-base is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# skonfig-base is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with skonfig-base. If not, see <http://www.gnu.org/licenses/>.
#

set -e -u

file=$(cat "${__object:?}/parameter/file")

case $(cat "${__object:?}/parameter/key")
in
	('')
		echo 'The --key must not be empty' >&2
		exit 1
		;;
	(/*)
		keyfile=$(cat "${__object:?}/parameter/key")

		test -r "${keyfile}" || {
			printf 'The --key looks like a file path, but no such file could be found.\n' >&2
			exit 1
		}
		;;
	(*)
		keyfile="${__object:?}/parameter/key"
		;;
esac

# generate the entry as it should be (incl. any forced --options or --comment)
# errors, if any are found, are reported in the exit status
entry_should=$(awk -f "${__type:?}/files/genentry.awk" <"${keyfile:?}") || {
	case $?
	in
		(1)
			echo 'An unexpected error occurred during the parsing of the SSH public key (file)' >&2
			exit 1
			;;
		(2)
			echo 'No SSH public key could be found in:' >&2
			cat "${keyfile}" >&2
			exit 1
			;;
		(3)
			echo 'Invalid SSH public key:' >&2
			cat "${keyfile}" >&2
			exit 1
			;;
		(4)
			echo 'Multiple SSH public keys found in the key (file):' >&2
			cat "${keyfile}" >&2
			exit 1
			;;
	esac
}


shquot() {
	sed -e "s/'/'\\\\''/g" -e "1s/^/'/" -e "\$s/\$/'/" <<-EOF
	$*
	EOF
}

_umask=0077
ensure_remote_umask() {
	${_umask:+printf 'umask %03o\n' "${_umask}"}
	unset -v _umask
}

remove_lines() {
	test -n "${2-}" || return 0

	ensure_remote_umask
	cat <<-EOF
	tmpfile=\$(mktemp $(shquot "${1:?}.skonfig.XXXXXX"))
	grep -v -x -F \\
	$(printf '%s\n' "${2:?}" | LC_ALL=C sort -u | sed -e "s/'/'\\\\''/g" -e "s/^.*\$/       -e '&' \\\\/")
	<$(shquot "${1:?}") >"\${tmpfile}" || :
	cat "\${tmpfile}" >$(shquot "${1:?}")
	rm -f "\${tmpfile}"

	EOF

	awk -v f="${1:?}" '{printf "removed from %s (%s)" ORS, f, $0}' <<-EOF >>"${__messages_out:?}"
	$2
	EOF
}

add_line() {
	ensure_remote_umask
	printf 'cat <<'\''EOF'\'' >>%s\n%s\nEOF\n' \
		"$(shquot "${1:?}")" \
		"${2:?}"

	printf 'added to %s (%s)\n' "${1:?}" "${2:?}" >>"${__messages_out:?}"
}


if ! test -s "${__object:?}/explorer/entry"
then
	state_is=absent
elif printf '%s\n' "${entry_should}" | cmp -s "${__object:?}/explorer/entry" -
then
	state_is=present
else
	state_is=different
fi
read -r state_should <"${__object:?}/parameter/state"


test "${state_should}" != "${state_is}" || exit 0

case ${state_should}
in
	(present)
		# remove conflicting entries if any
		if test -s "${__object:?}/explorer/entry"
		then
			# ensure that the files are sorted for comparison with comm(1).
			remove_lines \
				"${file}" \
				"$(printf '%s\n' "${entry_should}" | LC_ALL=C comm -13 - "${__object:?}/explorer/entry")"
		fi

		key_present_count=$(grep -c -x -F -e "${entry_should}" "${__object:?}/explorer/entry") || :
		# NOTE: the key needs to be (re-)added iff it didn't occur exactly once in
		#       the --file.  In case the same key occurs multiple times in --file,
		#       all occurrences will have been removed by remove_lines() above.
		if test $((key_present_count)) -ne 1
		then
			# add desired entry if it doesn't exist already
			add_line "${file}" "${entry_should}"
		fi
		;;
	(absent)
		remove_lines \
			"${file}" \
			"$(cat "${__object:?}/explorer/entry")"
		;;
esac
