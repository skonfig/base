#!/bin/sh -e
#
# 2012-2016 Steven Armstrong (steven-cdist at armstrong.cc)
# 2016 Carlos Ortigoza (carlos.ortigoza at ungleich.ch)
# 2016 Nico Schottelius (nico.schottelius at ungleich.ch)
# 2020,2022-2023,2025 Dennis Camera (dennis.camera at riiengineering.ch)
#
# This file is part of skonfig-base.
#
# skonfig-base is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# skonfig-base is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with skonfig-base. If not, see <http://www.gnu.org/licenses/>.
#

version_ge() {
	# usage: version_ge version_is min_version_expected
	#
	# compares two version numbers (up to three numeric components separated
	# with dots)
	# returns 0 if `version_is` >= `min_version_expected`, 1 otherwise.
	#
	# NOTES: if the lowest value of the two version numbers is equal to
	#        `min_version_expected`, `version_is` must be the same or larger.
	#        `-k n,n` instead of `-k n` is required for some sort(1)s.
	LC_ALL=C sort -t. -n -k1,1 -k2,2 -k3,3 <<-EOF | { read -r _x; test "${_x}" = "$2"; }
	$1
	$2
	EOF
}


key=${__object_id:?}
onchange_cmd=  # none, by default
quote_value=false

catval() {
    # shellcheck disable=SC2059
    printf "$(${quote_value?} && echo '"%s"' || echo '%s')" "$(cat "$1")"
}

read -r state_should <"${__object:?}/parameter/state"

os=$(cat "${__global:?}/explorer/os")

case ${os}
in
    (debian)
        os_version=$(cat "${__global:?}/explorer/os_version")
        if version_ge "${os_version}" 12.99
        then
            # Debian "12.99" (trixie/sid) and later
            locale_conf='/etc/locale.conf'
        elif version_ge "${os_version}" 4
        then
            # Debian 4 (etch) and later
            locale_conf='/etc/default/locale'
        else
            locale_conf='/etc/environment'
        fi
        ;;
    (devuan)
        locale_conf='/etc/default/locale'
        ;;
    (ubuntu)
        os_version=$(cat "${__global:?}/explorer/os_version")
        if version_ge "${os_version}" 6.10
        then
            # Ubuntu 6.10 (edgy) and later
            locale_conf='/etc/default/locale'
        else
            locale_conf='/etc/environment'
        fi
        ;;
    (archlinux)
        locale_conf='/etc/locale.conf'
        ;;
    (redhat|centos|almalinux|eurolinux|rocky|oraclelinux)
        # NOTE: This is a hack to differentiate Red Hat Linux from
        # RHEL. Red Hat Linux >= 7 does not have os-release and will
        # thus fall back to /etc/sysconfig/i18n.
        # shellcheck source=/dev/null
        version_id=$(. "${__global:?}/explorer/os_release" && echo "${VERSION_ID:-0}")
        if version_ge "${version_id}" 7
        then
            locale_conf='/etc/locale.conf'
        else
            locale_conf='/etc/sysconfig/i18n'
        fi
        ;;
    (fedora)
        read -r os_version <"${__global:?}/explorer/os_version"
        if version_ge "${os_version}" 18
        then
            locale_conf='/etc/locale.conf'
            quote_value=false
        else
            locale_conf='/etc/sysconfig/i18n'
        fi
        ;;
    (gentoo)
        init=$(cat "${__global:?}/explorer/init")
        case ${init}
        in
            (*openrc*)
                locale_conf='/etc/env.d/02locale'
                onchange_cmd='env-update --no-ldconfig'
                quote_value=true
                ;;
            (systemd)
                locale_conf='/etc/locale.conf'
                ;;
        esac
        ;;
    (freebsd|netbsd)
        # NetBSD doesn't have a separate configuration file to set locales.
        # In FreeBSD locales could be configured via /etc/login.conf but parsing
        # that would be annoying, so the shell login file will have to do.
        # "Non-POSIX" shells like csh will not be updated here.

        locale_conf='/etc/profile'
        quote_value=true
        value="$(catval "${__object:?}/parameter/value"); export ${key}"
        ;;
    (solaris)
        locale_conf='/etc/default/init'
        locale_conf_group='sys'

        os_version=$(cat "${__global:?}/explorer/os_version")
        if version_ge "${os_version}" 5.11
        then
            # mode on Oracle Solaris 11 is actually 0444,
            # but the write bit makes sense, IMO
            locale_conf_mode=0644

            # Oracle Solaris 11.2 and later uses SMF to store environment info.
            # This is a hack, but I didn't feel like modifying the whole type
            # just for some Oracle nonsense.
            # 11.3 apparently added nlsadm(1m), but it is missing from 11.2.
            # Illumos continues to use /etc/default/init
            # NOTE: Remember not to use "cool" POSIX features like -q or -e with
            # Solaris grep.
            release_regex='Oracle Solaris 11.[2-9][0-9]*'
            case ${state_should}
            in
                (present)
                    svccfg_cmd="svccfg -s svc:/system/environment:init setprop environment/${key} = astring: '$(cat "${__object:?}/parameter/value")'"
                    ;;
                (absent)
                    svccfg_cmd="svccfg -s svc:/system/environment:init delprop environment/${key}"
                    ;;
            esac
            refresh_cmd='svcadm refresh svc:/system/environment'
            onchange_cmd="grep '${release_regex}' /etc/release >&- || exit 0; ${svccfg_cmd:-:} && ${refresh_cmd:-:}"
        else
            locale_conf_mode=0555
        fi
        ;;
    (slackware)
        # NOTE: lang.csh (csh config) is ignored here.
        locale_conf='/etc/profile.d/lang.sh'
        locale_conf_mode=0755
        key="export ${__object_id:?}"
        ;;
    (suse)
        read -r os_version <"${__global:?}/explorer/os_version"
        os_major=${os_version%%[!0-9]*}

        # https://documentation.suse.com/sles/15-SP2/html/SLES-all/cha-suse.html#sec-suse-l10n
        if test $((os_major)) -ge 15 && test $((os_major)) -ne 42
        then
            # It seems that starting with SuSE 15 the systemd /etc/locale.conf
            # is the preferred way to set locales, although
            # /etc/sysconfig/language is still available.
            # Older documentation doesn't mention /etc/locale.conf, even though
            # is it created when localectl is used.
            locale_conf='/etc/locale.conf'
        else
            locale_conf='/etc/sysconfig/language'
            quote_value=true
            key="RC_${__object_id:?}"
        fi
        ;;
    (voidlinux)
        locale_conf='/etc/locale.conf'
        ;;
    (*)
        : "${__type:?}"  # make shellcheck happy
        echo "Your operating system (${os}) is currently not supported by this type (${__type##*/})." >&2
        echo 'Please contribute an implementation for it if you can.' >&2
        exit 1
        ;;
esac

__file "${locale_conf}" \
    --state exists \
    --owner "${locale_conf_owner:-0}" \
    --group "${locale_conf_group:-0}" \
    --mode "${locale_conf_mode:-0644}"

require="__file${locale_conf}" \
__key_value "${locale_conf}:${key#export }" \
    --file "${locale_conf}" \
    --key "${key}" \
    --delimiter '=' --exact_delimiter \
    --state "${state_should}" \
    --value "${value:-$(catval "${__object:?}/parameter/value")}" \
    --onchange "${onchange_cmd-}"
